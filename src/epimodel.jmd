# Numerical Methods for Epidemic Models

Given a differential equation

    u̇ = f(u,p,t)

where u is the state vector, p is the parameter vector, and t is the current time. We call f a time varying parameterized vector field.

For example, the classic epidemiological model developed by Kermack and McKendrick, also known as the SIR model is time varying parameterized vector field. https://en.wikipedia.org/wiki/Kermack%E2%80%93McKendrick_theory is a time varying vector field. For further reading see https://www.maa.org/book/export/html/115609.

```julia
f(u, p, t) = begin
  ϕ₁ = p[1]*u[1]*u[2]/sum(u)
  ϕ₂ = p[2]*u[2]
  return (-ϕ₁, ϕ₁-ϕ₂, ϕ₂)
end
```

The original technique for solving differential equations like this is to use Euler's method.
This method is so elementary that it goes back to origins of calculus.
A translation of Euler's work on calculus is available from [Ian Bruce](http://www.17centurymaths.com/contents/integralcalculusvol1.htm)


The idea for Euler's method comes directly from the definition of the derivative as the vector tangent to the curve.

    u̇ := lim u(t+Δt) - u(t) / Δt as Δt → 0

If u̇(t) = f(u(t)), and u(t) is known, then u(t+Δt) ≈ u(t) + Δt⋅f(u(t))
This approximation is the simplest possible Runge Kutta method. We will return to this at the end of the semester. 

```julia
function euler(f, u₀, p, tspan, Δt)
  tsteps = tspan[1]:Δt:tspan[2]
  U = zeros(eltype(u₀), length(u₀), length(tsteps))
  U[:, 1] = u₀
  for (i,t) in enumerate(tsteps[2:end])
    u = U[:,i]
    uₙ = u .+ Δt .* f(u, p, t)
    U[:,i+1] = uₙ
  end
  return tsteps, U
end
```

We can run this code by choosing some initial conditions and parameters

```julia
t₀ = 0.0
t₁ = 1.0
Δt = 0.01
u₀ = [100.0, 1, 0]
p = [25.0, 3.5]
tsteps, soln = euler(f, u₀, p, (t₀,t₁), Δt)
```

We can plot the solution as a function of time. Each line is a different variable.

```julia
using Plots
using PlotThemes
theme(:default, w=5)
```

```julia
plot(tsteps, soln')
```

The SIR model assumes that you can only get sick once, but because of evolutionary changes to a virus over time and the waning memory of the immune system over time people can be reinfected as part of the same epidemic process. The SIRS model accounts for this reinfection process.

```julia
fsirs(u, p, t) = begin
  ϕ₁ = p[1]*u[1]*u[2]/sum(u)
  ϕ₂ = p[2]*u[2]
  ϕ₃ = p[3]*u[3]
  return (ϕ₃-ϕ₁, ϕ₁-ϕ₂, ϕ₂-ϕ₃)
end

psirs = [25.0, 3.5, 2.0]
tsteps, soln = euler(fsirs, u₀, psirs, (t₀,t₁), Δt)
```

Notice that this system tends toward a constant population of infectious people.

```julia
plot(tsteps, soln')
```

We can check that this steady state exists by simulating the system for longer.

```julia
tsteps, soln = euler(fsirs, u₀, psirs, (t₀,2t₁), Δt)
plot(tsteps, soln')
```

In order to prove that a steady state exists, you have to solve a nonlinear system of equations to show that the derivatives are 0 at the steady state. A steady state is defined as a value of u where u̇ = f(u) = 0. At a steady state the differential equations dictate that the value of the solution won't change.

```julia
fsirs(u₀, psirs, 0)
tsteps, soln = euler(fsirs, u₀, psirs, (t₀,2t₁), Δt)
uₑ = soln[:, end]
plot(tsteps, soln')
```

```julia
fsirs(uₑ, psirs, 2t₁)
tsteps, soln = euler(fsirs, u₀, psirs, (t₀,3t₁), Δt)
uₑ = soln[:, end]
plot(tsteps, soln')
```

```julia
fsirs(uₑ, psirs, 3t₁)
derivs = zeros(Float64, length(tsteps), length(u₀))
map(1:length(tsteps)) do i
  derivs[i,:] .= fsirs(soln[:, i], psirs, tsteps[i])
end

derivs
plot(tsteps, derivs)
```

The approach we used to finding a steady state relied is the "run the simulator for a long time and hope it converges" strategy. This strategy relies on some pretty special properties of the model in order to work. It has to have a stable steady state with a large basin of attraction. If you have multiple steady states, or unstable steady states this method won't work and you have to do something smarter. The best approach is to frame the steady state equation as a nonlinear root finding problem and use nonlinear solvers to find a root. This has deep connections to optimization since 

    f(u) = 0 ⟺ minᵤ ||f(u)||₂ = 0 
 
Julia has the excellent NLsolve.jl package for this.

```julia
using NLsolve

# We have to wrap our vector field function to satisfy the API expected by NLsolve
fsirs!(du, u) = begin
  du .= fsirs(u, psirs, 0)
  return du
end
```
The result of the solver is a structure that tells us details of the proceedure. A key skill you will learn in this class is how to read these outputs.

```julia
result = nlsolve(fsirs!, u₀/sum(u₀), autodiff = :forward, method=:newton)
```

The actual root can be accessed as a field in the result struct.

```julia
result.zero
```

Notice that our root is the steady state (0,0,0). If you have no population, you can't have an epidemic. 
Another property of this system is that it has a conserve population. Since people are neither created nor destroyed in this system, we can rescale the populations into fractions of the total population. If we skip this step, then there are multiple steady states which makes the computational investigation harder.

Let's run the simulator a little bit to get away from the trivial steady state.

```julia
tsteps, soln = euler(fsirs, u₀/sum(u₀), psirs, (t₀,t₁/3), Δt)
uₑ = soln[:, end]
result = nlsolve(fsirs!, uₑ/sum(uₑ), autodiff = :forward, method=:newton)
result.zero
```

```julia
tsteps, soln = euler(fsirs, u₀/sum(u₀), psirs, (t₀,3t₁), Δt)
uₑ = soln[:, end]
plot(tsteps, soln')
```

```julia
norm(x) = sqrt(x'x)
uₑ/norm(uₑ) - result.zero/norm(result.zero)
```

If we want to solve the nonlinear rootfinding problem with Newton's method, then we have to set up and solve a linear system of equations. A single step of the Newton's method is 

    xₖ₊₁ = xₖ - J(xₖ)\f(xₖ)

We switched from u to x, because the steps of Newton's method aren't the state variables of the differential equation.

```julia
newtonstep(f, J, xₖ) = xₖ + (J(xₖ)) \ -collect(f(xₖ))

using ForwardDiff
using LinearAlgebra
fsirs₁(u) = collect(fsirs(u, psirs, 0))
Jsirs(x) = ForwardDiff.jacobian(fsirs₁, x)
```

If we start our Newton iterations close to the trivial steady state, we find it in one iteration!

```julia
newtonstep(fsirs₁, Jsirs, u₀/sum(u₀))
```


```julia
function newtoniteration(f, J, x₀, nsteps)
  x = x₀
  for i in 1:nsteps
    if norm(f(x)) < 1e-8 # we did it!
      return x
    end
    x .= newtonstep(f,J, x) # keep going!
  end
  return x
end
newtoniteration(fsirs₁, Jsirs, soln[:, 250], 10)
```

The standard Newton method is quite brittle and will diverge for many starting guesses.
The quasi-netwon methods will fix this.

```julia
try 
  newtoniteration(fsirs₁, Jsirs, soln[:, 249], 10)
catch SingularException
  println("Bad News Bears")
end
```

Other topics we will cover in this class are curve fitting and matrix algorithms. 

```julia
Jₑ = Jsirs(soln[:,end])
```

```julia
Λ  = eigvals(Jₑ)
```

```julia
abs.(Λ)
```

```julia
plot(tsteps[1:end÷2], real.(exp.(-Λ'.*(tsteps[1:end÷2]))))
```